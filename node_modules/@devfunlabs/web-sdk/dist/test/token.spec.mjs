import { describe, it } from "mocha/index.js";
import { expect } from "chai";
import { fetchPumpFunTrends, tryFetchPumpfunToken } from "../pumpfun/index.mjs";
import { tryFetchDexscreenerToken } from "../dexscreener/index.mjs";
import { fetchTokenInfoByAddress, fetchTokenInfoBySymbol } from "../token.mjs";
const TOKEN_MINT = 'AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump';
const TOKEN_INFO = {
    contractAddress: TOKEN_MINT,
    symbol: 'HAT',
    name: 'TOP HAT',
    description: "Solana's first no-code AI agent launchpad.",
    creator: 'BXjEFPEDwgNrAdLRHb9kqLK4DrLtd3uQPcmiQpKPZTd5',
    twitter: 'https://x.com/TopHat_One',
    telegram: 'https://t.me/+DLUgJl8MCDBjNTFk',
    website: 'https://tophat.one',
    createdTime: 1730374103343,
    image: 'https://pump.mypinata.cloud/ipfs/QmPPhPbe9t5AKkBgBP4uon7aBdwLzukdS5PJoujC4YjJBj?img-width=256&img-dpr=2',
};
describe('Token info', () => {
    it('extract pumpfun token info', async () => {
        const info = await tryFetchPumpfunToken('AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump');
        expect(info?.contractAddress).to.equal(TOKEN_INFO.contractAddress);
        expect(info?.symbol).to.equal(TOKEN_INFO.symbol);
        expect(info?.name).to.equal(TOKEN_INFO.name);
        expect(info?.description).to.equal(TOKEN_INFO.description);
        expect(info?.creator).to.equal(TOKEN_INFO.creator);
        expect(info?.twitter).to.equal(TOKEN_INFO.twitter);
        expect(info?.telegram).to.equal(TOKEN_INFO.telegram);
        expect(info?.website).to.equal(TOKEN_INFO.website);
        expect(info?.createdTime).to.equal(TOKEN_INFO.createdTime);
        expect(info?.image).to.equal(TOKEN_INFO.image);
        expect(info?.marketcap).to.gt(0);
    });
    it('extract dexscreener token info', async () => {
        const info = await tryFetchDexscreenerToken('AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump');
        expect(info?.contractAddress).to.equal(TOKEN_INFO.contractAddress);
        expect(info?.symbol).to.equal(TOKEN_INFO.symbol);
        expect(info?.name).to.equal(TOKEN_INFO.name);
        expect(info?.twitter).to.equal(TOKEN_INFO.twitter);
        expect(info?.telegram).to.not.empty;
        expect(info?.website).to.not.empty;
        expect(info?.marketcap).to.gt(0);
        expect(info?.price).to.gt(0);
        expect(info?.buyTxIn24h).to.gt(0);
        expect(info?.sellTxIn24h).to.gt(0);
        expect(info?.volumeIn24h).to.gt(0);
        expect(info?.priceChangeIn24h).to.not.null;
        expect(info?.liquidityInUSD).to.gt(0);
    });
    it('extract token info by address', async () => {
        const info = await fetchTokenInfoByAddress('AxGAbdFtdbj2oNXa4dKqFvwHzgFtW9mFHWmd7vQfpump');
        console.info(info);
        expect(info?.contractAddress).to.equal(TOKEN_INFO.contractAddress);
        expect(info?.symbol).to.equal(TOKEN_INFO.symbol);
        expect(info?.name).to.equal(TOKEN_INFO.name);
        expect(info?.description).to.equal(TOKEN_INFO.description);
        expect(info?.creator).to.equal(TOKEN_INFO.creator);
        expect(info?.twitter).to.equal(TOKEN_INFO.twitter);
        expect(info?.telegram).to.equal(TOKEN_INFO.telegram);
        expect(info?.website).to.equal(TOKEN_INFO.website);
        expect(info?.createdTime).to.equal(TOKEN_INFO.createdTime);
        expect(info?.image).to.equal(TOKEN_INFO.image);
        expect(info?.marketcap).to.gt(0);
        expect(info?.price).to.gt(0);
    });
    it('extract token info by symbol', async () => {
        const info = await fetchTokenInfoBySymbol('HAT');
        console.info(info);
        expect(info?.contractAddress).to.equal(TOKEN_INFO.contractAddress);
        expect(info?.symbol).to.equal(TOKEN_INFO.symbol);
        expect(info?.name).to.equal(TOKEN_INFO.name);
        expect(info?.twitter).to.equal(TOKEN_INFO.twitter);
        expect(info?.telegram).to.not.empty;
        expect(info?.website).to.not.empty;
        expect(info?.marketcap).to.gt(0);
        expect(info?.price).to.gt(0);
        expect(info?.buyTxIn24h).to.gt(0);
        expect(info?.sellTxIn24h).to.gt(0);
        expect(info?.volumeIn24h).to.gt(0);
        expect(info?.priceChangeIn24h).to.not.null;
        expect(info?.liquidityInUSD).to.gt(0);
    });
    it('fetch trending tokens', async () => {
        const tokens = await fetchPumpFunTrends();
        expect(tokens.length).to.gt(10);
        expect(tokens[0].name).to.not.empty;
    });
});
