"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryFetchPumpfunToken = tryFetchPumpfunToken;
const utils_1 = require("../utils/index.cjs");
async function tryFetchPumpfunToken(mint) {
    if (!(0, utils_1.isValidSolanaAddress)(mint)) {
        throw new Error(`Invalid Solana address`);
    }
    try {
        return await fetchPumpfunToken(mint);
    }
    catch {
        return null;
    }
}
async function fetchPumpfunToken(mint) {
    const url = `https://pump.fun/coin/${mint}`;
    const { data } = await utils_1.HTTP.get(url);
    const coinMatch = data.match(/\\"coin\\":\s*(\{.*?\})(?=,\\"|\}\])/);
    let tokenData = null;
    if (coinMatch && coinMatch[1]) {
        try {
            const cleanedJson = coinMatch[1]
                .replaceAll('\\"', '"')
                .replaceAll('\\\\', '\\')
                .replaceAll(/"[^"]*?<script>[^"]*"/g, '');
            tokenData = JSON.parse(cleanedJson);
        }
        catch (error) {
            console.error('Failed to parse token data:', error);
        }
    }
    if (!tokenData || !tokenData.symbol) {
        throw new Error(`Token not found on pump.fun`);
    }
    // TODO: store image in S3
    const image = tokenData.image_uri
        ? `https://pump.mypinata.cloud/ipfs/${tokenData.image_uri.match(/(?<=\/ipfs\/)\w+/)?.[0]}?img-width=256&img-dpr=2`
        : undefined;
    return {
        contractAddress: mint,
        symbol: tokenData.symbol,
        name: tokenData.name,
        description: tokenData.description,
        creator: tokenData.creator,
        twitter: tokenData.twitter,
        telegram: tokenData.telegram,
        website: tokenData.website,
        complete: tokenData.complete,
        image,
        marketcap: tokenData.usd_market_cap,
        createdTime: tokenData.created_timestamp,
    };
}
