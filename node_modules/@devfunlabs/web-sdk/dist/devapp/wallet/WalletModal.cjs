"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletModal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const wallet_adapter_base_1 = require("@solana/wallet-adapter-base");
const wallet_adapter_react_1 = require("@solana/wallet-adapter-react");
const react_1 = require("react");
const react_dom_1 = require("react-dom");
const browser_1 = require("../../utils/browser.cjs");
const Button_1 = require("./Button.cjs");
const Collapse_1 = require("./Collapse.cjs");
const useWalletModal_1 = require("./useWalletModal.cjs");
const environment_1 = require("./utils/environment.cjs");
const WalletInstallSteps_1 = require("./WalletInstallSteps.cjs");
const WalletListItem_1 = require("./WalletListItem.cjs");
const wallets_1 = require("./wallets.cjs");
function getWalletDeepLink(wallet) {
    const env = (0, environment_1.getEnvironment)();
    if (!env.isMobile)
        return null;
    const dappUrl = encodeURIComponent(window.location.href);
    switch (wallet.name.toLowerCase()) {
        case 'phantom': {
            return `https://phantom.app/ul/browse/${dappUrl}?ref=${dappUrl}`;
        }
        case 'backpack': {
            return 'https://backpack.app/ul/v1/connect';
        }
        case 'okx wallet': {
            return `okx://wallet/dapp/url?dappUrl=${dappUrl}`;
        }
        default: {
            return null;
        }
    }
}
const WalletModal = ({ className = '', container = 'body' }) => {
    const ref = (0, react_1.useRef)(null);
    const { wallets, select } = (0, wallet_adapter_react_1.useWallet)();
    const { setVisible } = (0, useWalletModal_1.useWalletModal)();
    const [expanded, setExpanded] = (0, react_1.useState)(false);
    const [fadeIn, setFadeIn] = (0, react_1.useState)(false);
    const [portal, setPortal] = (0, react_1.useState)(null);
    const [defaultWallet, setDefaultWallet] = (0, react_1.useState)(null);
    const [listedWallets, collapsedWallets] = (0, react_1.useMemo)(() => {
        const installed = [];
        const notInstalled = [];
        for (const wallet of wallets) {
            if (wallet.readyState === wallet_adapter_base_1.WalletReadyState.Installed) {
                installed.push(wallet);
            }
            else {
                notInstalled.push(wallet);
            }
        }
        return installed.length > 0 ? [installed, notInstalled] : [notInstalled, []];
    }, [wallets]);
    const hideModal = (0, react_1.useCallback)(() => {
        setFadeIn(false);
        setTimeout(() => setVisible(false), 150);
    }, [setVisible]);
    const handleClose = (0, react_1.useCallback)((event) => {
        event.preventDefault();
        hideModal();
    }, [hideModal]);
    const handleWalletClick = (0, react_1.useCallback)((event, walletName) => {
        select(walletName);
        handleClose(event);
    }, [select, handleClose]);
    const handleDefaultWalletClick = async (event, wallet) => {
        const deepLink = getWalletDeepLink(wallet);
        if (deepLink) {
            (0, browser_1.openLink)(deepLink);
            setTimeout(() => {
                setDefaultWallet(wallet);
            }, 1000);
        }
        else {
            setDefaultWallet(wallet);
        }
    };
    const handleBack = (0, react_1.useCallback)(() => {
        setDefaultWallet(null);
    }, []);
    const handleCollapseClick = (0, react_1.useCallback)(() => setExpanded(!expanded), [expanded]);
    const handleTabKey = (0, react_1.useCallback)((event) => {
        const node = ref.current;
        if (!node)
            return;
        const focusableElements = node.querySelectorAll('button');
        const firstElement = focusableElements[0];
        // eslint-disable-next-line unicorn/prefer-at
        const lastElement = focusableElements[focusableElements.length - 1];
        if (event.shiftKey) {
            // if going backward by pressing tab and firstElement is active, shift focus to last focusable element
            if (document.activeElement === firstElement) {
                lastElement.focus();
                event.preventDefault();
            }
        }
        else {
            // if going forward by pressing tab and lastElement is active, shift focus to first focusable element
            if (document.activeElement === lastElement) {
                firstElement.focus();
                event.preventDefault();
            }
        }
    }, [ref]);
    (0, react_1.useLayoutEffect)(() => {
        const handleKeyDown = (event) => {
            if (event.key === 'Escape') {
                hideModal();
            }
            else if (event.key === 'Tab') {
                handleTabKey(event);
            }
        };
        // Get original overflow
        const { overflow } = window.getComputedStyle(document.body);
        // Hack to enable fade in animation after mount
        setTimeout(() => setFadeIn(true), 0);
        // Prevent scrolling on mount
        document.body.style.overflow = 'hidden';
        // Listen for keydown events
        window.addEventListener('keydown', handleKeyDown, false);
        return () => {
            // Re-enable scrolling when component unmounts
            document.body.style.overflow = overflow;
            window.removeEventListener('keydown', handleKeyDown, false);
        };
    }, [hideModal, handleTabKey]);
    (0, react_1.useLayoutEffect)(() => setPortal(document.querySelector(container)), [container]);
    return (portal
        && (0, react_dom_1.createPortal)((0, jsx_runtime_1.jsxs)("div", { "aria-labelledby": "wallet-adapter-modal-title", "aria-modal": "true", className: `wallet-adapter-modal ${fadeIn && 'wallet-adapter-modal-fade-in'} ${className}`, ref: ref, role: "dialog", children: [(0, jsx_runtime_1.jsx)("div", { className: "wallet-adapter-modal-container", children: (0, jsx_runtime_1.jsxs)("div", { className: "wallet-adapter-modal-wrapper", children: [(0, jsx_runtime_1.jsx)("button", { onClick: handleClose, className: "wallet-adapter-modal-button-close", children: (0, jsx_runtime_1.jsx)("svg", { viewBox: "0 0 24 24", strokeWidth: "2", stroke: "currentColor", "aria-hidden": "true", "data-slot": "icon", height: "16px", width: "16px", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18 18 6M6 6l12 12" }) }) }), listedWallets.length > 0 ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("h1", { className: "wallet-adapter-modal-title", children: "Connect a wallet on Solana to continue" }), (0, jsx_runtime_1.jsxs)("ul", { className: "wallet-adapter-modal-list", children: [listedWallets.map(wallet => ((0, jsx_runtime_1.jsx)(WalletListItem_1.WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), wallet: wallet }, wallet.adapter.name))), collapsedWallets.length > 0 ? ((0, jsx_runtime_1.jsx)(Collapse_1.Collapse, { expanded: expanded, id: "wallet-adapter-modal-collapse", children: collapsedWallets.map(wallet => ((0, jsx_runtime_1.jsx)(WalletListItem_1.WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), tabIndex: expanded ? 0 : -1, wallet: wallet }, wallet.adapter.name))) })) : null] }), collapsedWallets.length > 0 ? ((0, jsx_runtime_1.jsxs)("button", { className: "wallet-adapter-modal-list-more", onClick: handleCollapseClick, tabIndex: 0, children: [(0, jsx_runtime_1.jsxs)("span", { children: [expanded ? 'Less ' : 'More ', "options"] }), (0, jsx_runtime_1.jsx)("svg", { width: "13", height: "7", viewBox: "0 0 13 7", xmlns: "http://www.w3.org/2000/svg", className: `${expanded ? 'wallet-adapter-modal-list-more-icon-rotate' : ''}`, children: (0, jsx_runtime_1.jsx)("path", { d: "M0.71418 1.626L5.83323 6.26188C5.91574 6.33657 6.0181 6.39652 6.13327 6.43762C6.24844 6.47872 6.37371 6.5 6.50048 6.5C6.62725 6.5 6.75252 6.47872 6.8677 6.43762C6.98287 6.39652 7.08523 6.33657 7.16774 6.26188L12.2868 1.626C12.7753 1.1835 12.3703 0.5 11.6195 0.5H1.37997C0.629216 0.5 0.224175 1.1835 0.71418 1.626Z" }) })] })) : null] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [defaultWallet ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { className: "wallet-adapter-modal-header", children: (0, jsx_runtime_1.jsx)("button", { onClick: handleBack, className: "wallet-adapter-modal-button-circle", children: (0, jsx_runtime_1.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "icon icon-tabler icons-tabler-outline icon-tabler-arrow-left", children: [(0, jsx_runtime_1.jsx)("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), (0, jsx_runtime_1.jsx)("path", { d: "M5 12l14 0" }), (0, jsx_runtime_1.jsx)("path", { d: "M5 12l6 6" }), (0, jsx_runtime_1.jsx)("path", { d: "M5 12l6 -6" })] }) }) }), (0, jsx_runtime_1.jsx)("div", { className: "wallet-adapter-modal-middle", children: (0, jsx_runtime_1.jsx)(WalletInstallSteps_1.WalletInstallSteps, { wallet: defaultWallet }) })] })) : ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("h1", { className: "wallet-adapter-modal-title", children: "You'll need a wallet on Solana to continue" }), (0, jsx_runtime_1.jsx)("ul", { className: "wallet-adapter-modal-list", children: wallets_1.defaultWallets.map((wallet, index) => ((0, jsx_runtime_1.jsx)("li", { children: (0, jsx_runtime_1.jsx)(Button_1.Button, { startIcon: (0, jsx_runtime_1.jsx)("img", { src: wallet.icon, alt: `${wallet.name} icon` }), tabIndex: index, onClick: event => handleDefaultWalletClick(event, wallet), children: wallet.name }) }, wallet.name))) })] })), collapsedWallets.length > 0 ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsxs)("button", { className: "wallet-adapter-modal-list-more", onClick: handleCollapseClick, tabIndex: 0, children: [(0, jsx_runtime_1.jsxs)("span", { children: [expanded ? 'Hide ' : 'Already have a wallet? View ', "options"] }), (0, jsx_runtime_1.jsx)("svg", { width: "13", height: "7", viewBox: "0 0 13 7", xmlns: "http://www.w3.org/2000/svg", className: `${expanded ? 'wallet-adapter-modal-list-more-icon-rotate' : ''}`, children: (0, jsx_runtime_1.jsx)("path", { d: "M0.71418 1.626L5.83323 6.26188C5.91574 6.33657 6.0181 6.39652 6.13327 6.43762C6.24844 6.47872 6.37371 6.5 6.50048 6.5C6.62725 6.5 6.75252 6.47872 6.8677 6.43762C6.98287 6.39652 7.08523 6.33657 7.16774 6.26188L12.2868 1.626C12.7753 1.1835 12.3703 0.5 11.6195 0.5H1.37997C0.629216 0.5 0.224175 1.1835 0.71418 1.626Z" }) })] }), (0, jsx_runtime_1.jsx)(Collapse_1.Collapse, { expanded: expanded, id: "wallet-adapter-modal-collapse", children: (0, jsx_runtime_1.jsx)("ul", { className: "wallet-adapter-modal-list", children: collapsedWallets.map(wallet => ((0, jsx_runtime_1.jsx)(WalletListItem_1.WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), tabIndex: expanded ? 0 : -1, wallet: wallet }, wallet.adapter.name))) }) })] })) : null] }))] }) }), (0, jsx_runtime_1.jsx)("div", { className: "wallet-adapter-modal-overlay", onMouseDown: handleClose })] }), portal));
};
exports.WalletModal = WalletModal;
