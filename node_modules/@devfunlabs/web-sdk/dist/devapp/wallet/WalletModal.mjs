import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { WalletReadyState } from "@solana/wallet-adapter-base";
import { useWallet } from "@solana/wallet-adapter-react";
import { useCallback, useLayoutEffect, useMemo, useRef, useState } from "react";
import { createPortal } from "react-dom";
import { openLink } from "../../utils/browser.mjs";
import { Button } from "./Button.mjs";
import { Collapse } from "./Collapse.mjs";
import { useWalletModal } from "./useWalletModal.mjs";
import { getEnvironment } from "./utils/environment.mjs";
import { WalletInstallSteps } from "./WalletInstallSteps.mjs";
import { WalletListItem } from "./WalletListItem.mjs";
import { defaultWallets } from "./wallets.mjs";
function getWalletDeepLink(wallet) {
    const env = getEnvironment();
    if (!env.isMobile)
        return null;
    const dappUrl = encodeURIComponent(window.location.href);
    switch (wallet.name.toLowerCase()) {
        case 'phantom': {
            return `https://phantom.app/ul/browse/${dappUrl}?ref=${dappUrl}`;
        }
        case 'backpack': {
            return 'https://backpack.app/ul/v1/connect';
        }
        case 'okx wallet': {
            return `okx://wallet/dapp/url?dappUrl=${dappUrl}`;
        }
        default: {
            return null;
        }
    }
}
export const WalletModal = ({ className = '', container = 'body' }) => {
    const ref = useRef(null);
    const { wallets, select } = useWallet();
    const { setVisible } = useWalletModal();
    const [expanded, setExpanded] = useState(false);
    const [fadeIn, setFadeIn] = useState(false);
    const [portal, setPortal] = useState(null);
    const [defaultWallet, setDefaultWallet] = useState(null);
    const [listedWallets, collapsedWallets] = useMemo(() => {
        const installed = [];
        const notInstalled = [];
        for (const wallet of wallets) {
            if (wallet.readyState === WalletReadyState.Installed) {
                installed.push(wallet);
            }
            else {
                notInstalled.push(wallet);
            }
        }
        return installed.length > 0 ? [installed, notInstalled] : [notInstalled, []];
    }, [wallets]);
    const hideModal = useCallback(() => {
        setFadeIn(false);
        setTimeout(() => setVisible(false), 150);
    }, [setVisible]);
    const handleClose = useCallback((event) => {
        event.preventDefault();
        hideModal();
    }, [hideModal]);
    const handleWalletClick = useCallback((event, walletName) => {
        select(walletName);
        handleClose(event);
    }, [select, handleClose]);
    const handleDefaultWalletClick = async (event, wallet) => {
        const deepLink = getWalletDeepLink(wallet);
        if (deepLink) {
            openLink(deepLink);
            setTimeout(() => {
                setDefaultWallet(wallet);
            }, 1000);
        }
        else {
            setDefaultWallet(wallet);
        }
    };
    const handleBack = useCallback(() => {
        setDefaultWallet(null);
    }, []);
    const handleCollapseClick = useCallback(() => setExpanded(!expanded), [expanded]);
    const handleTabKey = useCallback((event) => {
        const node = ref.current;
        if (!node)
            return;
        const focusableElements = node.querySelectorAll('button');
        const firstElement = focusableElements[0];
        // eslint-disable-next-line unicorn/prefer-at
        const lastElement = focusableElements[focusableElements.length - 1];
        if (event.shiftKey) {
            // if going backward by pressing tab and firstElement is active, shift focus to last focusable element
            if (document.activeElement === firstElement) {
                lastElement.focus();
                event.preventDefault();
            }
        }
        else {
            // if going forward by pressing tab and lastElement is active, shift focus to first focusable element
            if (document.activeElement === lastElement) {
                firstElement.focus();
                event.preventDefault();
            }
        }
    }, [ref]);
    useLayoutEffect(() => {
        const handleKeyDown = (event) => {
            if (event.key === 'Escape') {
                hideModal();
            }
            else if (event.key === 'Tab') {
                handleTabKey(event);
            }
        };
        // Get original overflow
        const { overflow } = window.getComputedStyle(document.body);
        // Hack to enable fade in animation after mount
        setTimeout(() => setFadeIn(true), 0);
        // Prevent scrolling on mount
        document.body.style.overflow = 'hidden';
        // Listen for keydown events
        window.addEventListener('keydown', handleKeyDown, false);
        return () => {
            // Re-enable scrolling when component unmounts
            document.body.style.overflow = overflow;
            window.removeEventListener('keydown', handleKeyDown, false);
        };
    }, [hideModal, handleTabKey]);
    useLayoutEffect(() => setPortal(document.querySelector(container)), [container]);
    return (portal
        && createPortal(_jsxs("div", { "aria-labelledby": "wallet-adapter-modal-title", "aria-modal": "true", className: `wallet-adapter-modal ${fadeIn && 'wallet-adapter-modal-fade-in'} ${className}`, ref: ref, role: "dialog", children: [_jsx("div", { className: "wallet-adapter-modal-container", children: _jsxs("div", { className: "wallet-adapter-modal-wrapper", children: [_jsx("button", { onClick: handleClose, className: "wallet-adapter-modal-button-close", children: _jsx("svg", { viewBox: "0 0 24 24", strokeWidth: "2", stroke: "currentColor", "aria-hidden": "true", "data-slot": "icon", height: "16px", width: "16px", children: _jsx("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18 18 6M6 6l12 12" }) }) }), listedWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsx("h1", { className: "wallet-adapter-modal-title", children: "Connect a wallet on Solana to continue" }), _jsxs("ul", { className: "wallet-adapter-modal-list", children: [listedWallets.map(wallet => (_jsx(WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), wallet: wallet }, wallet.adapter.name))), collapsedWallets.length > 0 ? (_jsx(Collapse, { expanded: expanded, id: "wallet-adapter-modal-collapse", children: collapsedWallets.map(wallet => (_jsx(WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), tabIndex: expanded ? 0 : -1, wallet: wallet }, wallet.adapter.name))) })) : null] }), collapsedWallets.length > 0 ? (_jsxs("button", { className: "wallet-adapter-modal-list-more", onClick: handleCollapseClick, tabIndex: 0, children: [_jsxs("span", { children: [expanded ? 'Less ' : 'More ', "options"] }), _jsx("svg", { width: "13", height: "7", viewBox: "0 0 13 7", xmlns: "http://www.w3.org/2000/svg", className: `${expanded ? 'wallet-adapter-modal-list-more-icon-rotate' : ''}`, children: _jsx("path", { d: "M0.71418 1.626L5.83323 6.26188C5.91574 6.33657 6.0181 6.39652 6.13327 6.43762C6.24844 6.47872 6.37371 6.5 6.50048 6.5C6.62725 6.5 6.75252 6.47872 6.8677 6.43762C6.98287 6.39652 7.08523 6.33657 7.16774 6.26188L12.2868 1.626C12.7753 1.1835 12.3703 0.5 11.6195 0.5H1.37997C0.629216 0.5 0.224175 1.1835 0.71418 1.626Z" }) })] })) : null] })) : (_jsxs(_Fragment, { children: [defaultWallet ? (_jsxs(_Fragment, { children: [_jsx("div", { className: "wallet-adapter-modal-header", children: _jsx("button", { onClick: handleBack, className: "wallet-adapter-modal-button-circle", children: _jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "icon icon-tabler icons-tabler-outline icon-tabler-arrow-left", children: [_jsx("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), _jsx("path", { d: "M5 12l14 0" }), _jsx("path", { d: "M5 12l6 6" }), _jsx("path", { d: "M5 12l6 -6" })] }) }) }), _jsx("div", { className: "wallet-adapter-modal-middle", children: _jsx(WalletInstallSteps, { wallet: defaultWallet }) })] })) : (_jsxs(_Fragment, { children: [_jsx("h1", { className: "wallet-adapter-modal-title", children: "You'll need a wallet on Solana to continue" }), _jsx("ul", { className: "wallet-adapter-modal-list", children: defaultWallets.map((wallet, index) => (_jsx("li", { children: _jsx(Button, { startIcon: _jsx("img", { src: wallet.icon, alt: `${wallet.name} icon` }), tabIndex: index, onClick: event => handleDefaultWalletClick(event, wallet), children: wallet.name }) }, wallet.name))) })] })), collapsedWallets.length > 0 ? (_jsxs(_Fragment, { children: [_jsxs("button", { className: "wallet-adapter-modal-list-more", onClick: handleCollapseClick, tabIndex: 0, children: [_jsxs("span", { children: [expanded ? 'Hide ' : 'Already have a wallet? View ', "options"] }), _jsx("svg", { width: "13", height: "7", viewBox: "0 0 13 7", xmlns: "http://www.w3.org/2000/svg", className: `${expanded ? 'wallet-adapter-modal-list-more-icon-rotate' : ''}`, children: _jsx("path", { d: "M0.71418 1.626L5.83323 6.26188C5.91574 6.33657 6.0181 6.39652 6.13327 6.43762C6.24844 6.47872 6.37371 6.5 6.50048 6.5C6.62725 6.5 6.75252 6.47872 6.8677 6.43762C6.98287 6.39652 7.08523 6.33657 7.16774 6.26188L12.2868 1.626C12.7753 1.1835 12.3703 0.5 11.6195 0.5H1.37997C0.629216 0.5 0.224175 1.1835 0.71418 1.626Z" }) })] }), _jsx(Collapse, { expanded: expanded, id: "wallet-adapter-modal-collapse", children: _jsx("ul", { className: "wallet-adapter-modal-list", children: collapsedWallets.map(wallet => (_jsx(WalletListItem, { handleClick: event => handleWalletClick(event, wallet.adapter.name), tabIndex: expanded ? 0 : -1, wallet: wallet }, wallet.adapter.name))) }) })] })) : null] }))] }) }), _jsx("div", { className: "wallet-adapter-modal-overlay", onMouseDown: handleClose })] }), portal));
};
