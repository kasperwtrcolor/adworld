import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useMemo, useRef, useState } from "react";
import { useWalletMultiButton } from "./base/index.mjs";
import { BaseWalletConnectionButton } from "./BaseWalletConnectionButton.mjs";
import { useWalletModal } from "./useWalletModal.mjs";
import { createWalletCSSVariables } from "./utils/cssVariables.mjs";
export function BaseWalletMultiButton({ children, labels, height, primaryColor, radius, bgColor, textColor, hoverBgColor, dropdownBgColor, dropdownTextColor, dropdownHoverBgColor, ...props }) {
    const { setVisible: setModalVisible } = useWalletModal();
    const { buttonState, onConnect, onDisconnect, publicKey, walletIcon, walletName } = useWalletMultiButton({
        onSelectWallet() {
            setModalVisible(true);
        },
    });
    const [copied, setCopied] = useState(false);
    const [menuOpen, setMenuOpen] = useState(false);
    const ref = useRef(null);
    useEffect(() => {
        const cssVars = createWalletCSSVariables({
            height,
            primaryColor,
            radius,
            buttonBgColor: bgColor,
            buttonTextColor: textColor,
            buttonHoverBgColor: hoverBgColor,
            dropdownBgColor,
            dropdownTextColor,
            dropdownHoverBgColor,
        });
        Object.entries(cssVars).forEach(([key, value]) => {
            if (value) {
                document.documentElement.style.setProperty(key, value);
            }
        });
        return () => {
            Object.keys(cssVars).forEach((key) => {
                document.documentElement.style.removeProperty(key);
            });
        };
    }, [primaryColor, radius, bgColor, textColor, hoverBgColor, dropdownBgColor, dropdownTextColor, dropdownHoverBgColor]);
    useEffect(() => {
        const listener = (event) => {
            const node = ref.current;
            if (!node || node.contains(event.target))
                return;
            setMenuOpen(false);
        };
        document.addEventListener('mousedown', listener);
        document.addEventListener('touchstart', listener);
        return () => {
            document.removeEventListener('mousedown', listener);
            document.removeEventListener('touchstart', listener);
        };
    }, []);
    const content = useMemo(() => {
        if (children) {
            return children;
        }
        else if (publicKey) {
            const base58 = publicKey.toBase58();
            return `${base58.slice(0, 4)}..${base58.slice(-4)}`;
        }
        else if (!(buttonState === 'connecting' || buttonState === 'has-wallet')) {
            return labels['no-wallet'];
        }
        return labels[buttonState];
    }, [buttonState, children, labels, publicKey]);
    return (_jsxs("div", { className: "wallet-adapter-dropdown", children: [_jsx(BaseWalletConnectionButton, { ...props, "aria-expanded": menuOpen, style: { pointerEvents: menuOpen ? 'none' : 'auto', ...props.style }, onClick: () => {
                    switch (buttonState) {
                        case 'no-wallet': {
                            setModalVisible(true);
                            break;
                        }
                        case 'has-wallet': {
                            if (onConnect) {
                                onConnect();
                            }
                            break;
                        }
                        case 'connected': {
                            setMenuOpen(true);
                            break;
                        }
                    }
                }, walletIcon: walletIcon, walletName: walletName, children: content }), _jsxs("ul", { "aria-label": "dropdown-list", className: `wallet-adapter-dropdown-list ${menuOpen && 'wallet-adapter-dropdown-list-active'}`, ref: ref, role: "menu", children: [publicKey ? (_jsx("li", { className: "wallet-adapter-dropdown-list-item", onClick: async () => {
                            await navigator.clipboard.writeText(publicKey.toBase58());
                            setCopied(true);
                            setTimeout(() => setCopied(false), 400);
                        }, role: "menuitem", children: copied ? labels['copied'] : labels['copy-address'] })) : null, _jsx("li", { className: "wallet-adapter-dropdown-list-item", onClick: () => {
                            setModalVisible(true);
                            setMenuOpen(false);
                        }, role: "menuitem", children: labels['change-wallet'] }), onDisconnect ? (_jsx("li", { className: "wallet-adapter-dropdown-list-item", onClick: () => {
                            onDisconnect();
                            setMenuOpen(false);
                        }, role: "menuitem", children: labels['disconnect'] })) : null] })] }));
}
