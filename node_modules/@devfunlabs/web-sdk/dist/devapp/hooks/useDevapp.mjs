import { useConnection, useWallet } from "@solana/wallet-adapter-react";
import { useContext, useMemo } from "react";
import { DevbaseClient } from "../../devbase/index.mjs";
import { DevappContext } from "../contexts/devapp.mjs";
export function useDevapp() {
    const context = useContext(DevappContext);
    const { connection } = useConnection();
    const wallet = useWallet();
    if (context === undefined) {
        throw new Error('useDevapp must be used within a DevappProvider');
    }
    const { publicKey, signTransaction, signMessage } = wallet;
    const { appId, rpcEndpoint, devbaseEndpoint } = context;
    const devbaseClient = useMemo(() => {
        const userId = publicKey?.toBase58();
        return new DevbaseClient({
            baseURL: devbaseEndpoint,
            rpcEndpoint,
            appId,
            user: userId ? { id: userId, token: '' } : undefined,
            signTransaction,
            signMessage,
        });
    }, [appId, devbaseEndpoint, publicKey, rpcEndpoint, signMessage, signTransaction]);
    return {
        wallet,
        connection,
        devbaseClient,
        userWallet: publicKey?.toBase58(),
        signTransaction,
        signMessage,
    };
}
