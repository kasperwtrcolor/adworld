import type { SignRequest, SignResult, TransferRequest, TransferResult } from "./action.mjs";
export type EntityQuery = Record<string, string | boolean | number>;
export type PaginationQuery = {
    pagination: boolean;
    pageSize: number;
    currentPage: number;
    query?: EntityQuery;
};
export type EntityDataRequest = Record<string, string | number | null | boolean>;
export type EntityRequest = {
    data?: EntityDataRequest;
    action?: {
        transfer?: TransferResult;
        sign?: SignResult;
    };
};
export interface EntityDataResponse extends EntityDataRequest {
    id: string;
    userId: string | null;
    createdAt: number;
}
export interface PaginatedEntityResponse {
    entities: EntityDataResponse[];
    totalCount: number;
    pageSize: number;
    currentPage: number;
    totalPages: number;
}
export type EntityResponse = {
    type: 'result';
    data: {
        success: boolean;
    };
} | {
    type: 'string';
    data: string;
} | {
    type: 'entity';
    data: EntityDataResponse;
} | {
    type: 'entity-list';
    data: EntityDataResponse[];
} | {
    type: 'entity-paginated';
    data: PaginatedEntityResponse;
} | {
    type: 'action-transfer';
    data: TransferRequest;
} | {
    type: 'action-sign';
    data: SignRequest;
};
//# sourceMappingURL=api.d.mts.map