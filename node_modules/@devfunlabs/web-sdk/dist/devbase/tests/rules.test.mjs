import { expect } from "chai";
import { describe, it } from "mocha/index.js";
import { DevbaseClient } from "../client/index.mjs";
import { defaultContext, defaultUserInfo, ERROR_RULE_CONDITION, ownerUserInfo } from "./_constants.mjs";
const entityName = 'posts';
describe('DevbaseClient Rule Test', () => {
    describe('Create', () => {
        it('should create an entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const data = { content: 'test_content' };
            const result = await client.createEntity(entityName, data);
            expect(result).to.have.property('id');
            expect(result).to.have.property('content', 'test_content');
            expect(result).to.have.property('createdAt');
        });
    });
    describe('List', () => {
        it('cannot list if never posted', async () => {
            const client = new DevbaseClient({ ...defaultContext });
            try {
                await client.listEntities(entityName);
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.equal('Invalid devbase condition');
            }
        });
        it('should list entities', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const filters = { content: 'test_content' };
            const result = await client.listEntities(entityName, filters);
            expect(result).to.be.an('array');
            expect(result.every(r => r.content === 'test_content')).to.be.true;
        });
        it('should paginate entities', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const filters = { content: 'test_content' };
            const { entities } = await client.paginateEntities(entityName, filters, { pageSize: 10, currentPage: 1 });
            expect(entities).to.be.an('array');
            expect(entities.every(r => r.content === 'test_content')).to.be.true;
        });
    });
    describe('Get', () => {
        it('failed to get others entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const ownerClient = new DevbaseClient({ ...defaultContext, user: ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.getEntity(entityName, id);
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.equal(ERROR_RULE_CONDITION);
            }
        });
        it('should get the users own entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const ownerClient = new DevbaseClient({ ...defaultContext, user: ownerUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            {
                const result = await client.getEntity(entityName, id);
                expect(result?.id).to.eql(id);
            }
            {
                const result = await ownerClient.getEntity(entityName, id);
                expect(result?.id).to.eql(id);
            }
        });
    });
    describe('Update', () => {
        it('failed to update others entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const ownerClient = new DevbaseClient({ ...defaultContext, user: ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { content: 'updated_content' });
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.equal(ERROR_RULE_CONDITION);
            }
        });
        it('should update entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            const result = await client.updateEntity(entityName, id, { content: 'updated_content' });
            expect(result).to.have.property('id', id);
            expect(result).to.have.property('content', 'updated_content');
        });
    });
    describe('Delete', () => {
        it('failed to delete others entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const ownerClient = new DevbaseClient({ ...defaultContext, user: ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.deleteEntity(entityName, id);
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.equal(ERROR_RULE_CONDITION);
            }
        });
        it('should delete an entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const ownerClient = new DevbaseClient({ ...defaultContext, user: ownerUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            const success = await ownerClient.deleteEntity(entityName, id);
            expect(success).to.be.true;
        });
    });
    describe('Eval', () => {
        it('should evaluate a condition', async () => {
            const client = new DevbaseClient({ ...defaultContext });
            const userClient = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            {
                const condition = 'true';
                const success = await client.evalCondition(condition);
                expect(success).to.be.true;
            }
            {
                const condition = 'false';
                const success = await client.evalCondition(condition);
                expect(success).to.be.false;
            }
            {
                const expression = '$USER_ID';
                const result = await client.evalExpression(expression);
                expect(result).to.be.empty;
                const resultUser = await userClient.evalExpression(expression);
                expect(resultUser).to.be.not.empty;
            }
        });
    });
});
