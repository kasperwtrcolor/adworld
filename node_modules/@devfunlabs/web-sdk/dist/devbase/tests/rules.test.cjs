"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const mocha_1 = require("mocha/index.js");
const client_1 = require("../client/index.cjs");
const _constants_1 = require("./_constants.cjs");
const entityName = 'posts';
(0, mocha_1.describe)('DevbaseClient Rule Test', () => {
    (0, mocha_1.describe)('Create', () => {
        (0, mocha_1.it)('should create an entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const data = { content: 'test_content' };
            const result = await client.createEntity(entityName, data);
            (0, chai_1.expect)(result).to.have.property('id');
            (0, chai_1.expect)(result).to.have.property('content', 'test_content');
            (0, chai_1.expect)(result).to.have.property('createdAt');
        });
    });
    (0, mocha_1.describe)('List', () => {
        (0, mocha_1.it)('cannot list if never posted', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext });
            try {
                await client.listEntities(entityName);
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.equal('Invalid devbase condition');
            }
        });
        (0, mocha_1.it)('should list entities', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const filters = { content: 'test_content' };
            const result = await client.listEntities(entityName, filters);
            (0, chai_1.expect)(result).to.be.an('array');
            (0, chai_1.expect)(result.every(r => r.content === 'test_content')).to.be.true;
        });
        (0, mocha_1.it)('should paginate entities', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const filters = { content: 'test_content' };
            const { entities } = await client.paginateEntities(entityName, filters, { pageSize: 10, currentPage: 1 });
            (0, chai_1.expect)(entities).to.be.an('array');
            (0, chai_1.expect)(entities.every(r => r.content === 'test_content')).to.be.true;
        });
    });
    (0, mocha_1.describe)('Get', () => {
        (0, mocha_1.it)('failed to get others entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const ownerClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.getEntity(entityName, id);
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.equal(_constants_1.ERROR_RULE_CONDITION);
            }
        });
        (0, mocha_1.it)('should get the users own entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const ownerClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.ownerUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            {
                const result = await client.getEntity(entityName, id);
                (0, chai_1.expect)(result?.id).to.eql(id);
            }
            {
                const result = await ownerClient.getEntity(entityName, id);
                (0, chai_1.expect)(result?.id).to.eql(id);
            }
        });
    });
    (0, mocha_1.describe)('Update', () => {
        (0, mocha_1.it)('failed to update others entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const ownerClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { content: 'updated_content' });
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.equal(_constants_1.ERROR_RULE_CONDITION);
            }
        });
        (0, mocha_1.it)('should update entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            const result = await client.updateEntity(entityName, id, { content: 'updated_content' });
            (0, chai_1.expect)(result).to.have.property('id', id);
            (0, chai_1.expect)(result).to.have.property('content', 'updated_content');
        });
    });
    (0, mocha_1.describe)('Delete', () => {
        (0, mocha_1.it)('failed to delete others entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const ownerClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.ownerUserInfo });
            const data = { content: 'test_content' };
            const result = await ownerClient.createEntity(entityName, data);
            const id = result?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.deleteEntity(entityName, id);
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.equal(_constants_1.ERROR_RULE_CONDITION);
            }
        });
        (0, mocha_1.it)('should delete an entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const ownerClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.ownerUserInfo });
            const data = { content: 'test_content' };
            const createResult = await client.createEntity(entityName, data);
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            const success = await ownerClient.deleteEntity(entityName, id);
            (0, chai_1.expect)(success).to.be.true;
        });
    });
    (0, mocha_1.describe)('Eval', () => {
        (0, mocha_1.it)('should evaluate a condition', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext });
            const userClient = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            {
                const condition = 'true';
                const success = await client.evalCondition(condition);
                (0, chai_1.expect)(success).to.be.true;
            }
            {
                const condition = 'false';
                const success = await client.evalCondition(condition);
                (0, chai_1.expect)(success).to.be.false;
            }
            {
                const expression = '$USER_ID';
                const result = await client.evalExpression(expression);
                (0, chai_1.expect)(result).to.be.empty;
                const resultUser = await userClient.evalExpression(expression);
                (0, chai_1.expect)(resultUser).to.be.not.empty;
            }
        });
    });
});
