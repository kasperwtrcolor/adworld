import { expect } from "chai";
import { describe, it } from "mocha/index.js";
import { DevbaseClient } from "../client/index.mjs";
import { defaultContext, defaultUserInfo } from "./_constants.mjs";
const entityName = 'payments';
describe('DevbaseClient Action Test', () => {
    describe('Transfer', () => {
        it('failed to update entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { amount: -1 });
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.contain('not initialized');
            }
        });
        it('should update an entity', async () => {
            let signHitCount = 0;
            const client = new DevbaseClient({
                ...defaultContext,
                user: defaultUserInfo,
                signTransaction: async (tx) => {
                    signHitCount += 1;
                    // TODO: real transaction signing
                    return tx;
                },
            });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { amount: -1 });
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.contain('Missing signature for public key');
                expect(signHitCount).to.equal(1);
            }
        });
    });
    describe('Sign', () => {
        it('failed to delete entity', async () => {
            const client = new DevbaseClient({ ...defaultContext, user: defaultUserInfo });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            try {
                await client.deleteEntity(entityName, id);
                expect.fail('Expected error was not thrown');
            }
            catch (error) {
                expect(error.message).to.contain('not initialized');
            }
        });
        it('should delete an entity', async () => {
            let signHitCount = 0;
            const client = new DevbaseClient({
                ...defaultContext,
                user: defaultUserInfo,
                signMessage: async (message) => {
                    signHitCount += 1;
                    // TODO: real message signing
                    return message;
                },
            });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            expect(id).to.not.empty;
            const result = await client.deleteEntity(entityName, id);
            expect(signHitCount).to.equal(1);
            expect(result).to.be.true;
        });
    });
});
