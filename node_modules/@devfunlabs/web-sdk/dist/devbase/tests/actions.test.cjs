"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const mocha_1 = require("mocha/index.js");
const client_1 = require("../client/index.cjs");
const _constants_1 = require("./_constants.cjs");
const entityName = 'payments';
(0, mocha_1.describe)('DevbaseClient Action Test', () => {
    (0, mocha_1.describe)('Transfer', () => {
        (0, mocha_1.it)('failed to update entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { amount: -1 });
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.contain('not initialized');
            }
        });
        (0, mocha_1.it)('should update an entity', async () => {
            let signHitCount = 0;
            const client = new client_1.DevbaseClient({
                ..._constants_1.defaultContext,
                user: _constants_1.defaultUserInfo,
                signTransaction: async (tx) => {
                    signHitCount += 1;
                    // TODO: real transaction signing
                    return tx;
                },
            });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.updateEntity(entityName, id, { amount: -1 });
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.contain('Missing signature for public key');
                (0, chai_1.expect)(signHitCount).to.equal(1);
            }
        });
    });
    (0, mocha_1.describe)('Sign', () => {
        (0, mocha_1.it)('failed to delete entity', async () => {
            const client = new client_1.DevbaseClient({ ..._constants_1.defaultContext, user: _constants_1.defaultUserInfo });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            try {
                await client.deleteEntity(entityName, id);
                chai_1.expect.fail('Expected error was not thrown');
            }
            catch (error) {
                (0, chai_1.expect)(error.message).to.contain('not initialized');
            }
        });
        (0, mocha_1.it)('should delete an entity', async () => {
            let signHitCount = 0;
            const client = new client_1.DevbaseClient({
                ..._constants_1.defaultContext,
                user: _constants_1.defaultUserInfo,
                signMessage: async (message) => {
                    signHitCount += 1;
                    // TODO: real message signing
                    return message;
                },
            });
            const createResult = await client.createEntity(entityName, {});
            const id = createResult?.id ?? '';
            (0, chai_1.expect)(id).to.not.empty;
            const result = await client.deleteEntity(entityName, id);
            (0, chai_1.expect)(signHitCount).to.equal(1);
            (0, chai_1.expect)(result).to.be.true;
        });
    });
});
