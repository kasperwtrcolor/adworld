import type { EntityDataRequest, EntityDataResponse, EntityQuery, PaginatedEntityResponse } from "../types/index.cjs";
import type { DevbaseContext } from "./context.cjs";
export declare class DevbaseClient {
    private readonly context;
    private readonly entity;
    constructor(context: DevbaseContext);
    createEntity(entityName: string, data: EntityDataRequest): Promise<EntityDataResponse | null>;
    listEntities(entityName: string, query?: EntityQuery): Promise<EntityDataResponse[]>;
    paginateEntities(entityName: string, query: EntityQuery | undefined, { pageSize, currentPage, }: {
        pageSize: number;
        currentPage: number;
    }): Promise<PaginatedEntityResponse>;
    getEntity(entityName: string, entityId: string): Promise<EntityDataResponse | null>;
    updateEntity(entityName: string, entityId: string, data: EntityDataRequest): Promise<EntityDataResponse | null>;
    deleteEntity(entityName: string, entityId: string): Promise<boolean>;
    evalCondition(expression: string): Promise<boolean>;
    evalExpression(expression: string): Promise<string>;
}
//# sourceMappingURL=client.d.cts.map