"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DevbaseClient = void 0;
const axios_1 = __importDefault(require("axios"));
const entity_1 = require("./processor/entity.cjs");
class DevbaseClient {
    context;
    entity;
    constructor(context) {
        this.context = context;
        this.entity = new entity_1.EntityProcessor(this.context);
    }
    async createEntity(entityName, data) {
        const result = await this.entity.request('POST', { entityName }, { body: { data } });
        return result.type === 'entity' ? result.data : null;
    }
    async listEntities(entityName, query) {
        const result = await this.entity.request('GET', { entityName }, { query });
        return result.type === 'entity-list' ? result.data : [];
    }
    async paginateEntities(entityName, query = {}, { pageSize, currentPage, }) {
        const paginationQuery = {
            ...query,
            pagination: true,
            pageSize,
            currentPage,
        };
        const result = await this.entity.request('GET', { entityName }, { query: paginationQuery });
        if (result.type === 'entity-paginated') {
            return result.data;
        }
        // Default empty response if server doesn't return paginated data
        return {
            entities: [],
            totalCount: 0,
            pageSize,
            currentPage,
            totalPages: 0,
        };
    }
    async getEntity(entityName, entityId) {
        const result = await this.entity.request('GET', { entityName, entityId });
        return result.type === 'entity' ? result.data : null;
    }
    async updateEntity(entityName, entityId, data) {
        const result = await this.entity.request('PATCH', { entityName, entityId }, { body: { data } });
        return result.type === 'entity' ? result.data : null;
    }
    async deleteEntity(entityName, entityId) {
        const result = await this.entity.request('DELETE', { entityName, entityId });
        return result.type === 'result' ? result.data.success : false;
    }
    async evalCondition(expression) {
        const { appId, baseURL } = this.context;
        const url = `/api/v1/${appId}/_eval/condition`;
        const headers = this.entity.buildHeaders();
        const { data: responseData } = await axios_1.default.post(url, { expression }, { baseURL, headers });
        return responseData.data.success;
    }
    async evalExpression(expression) {
        const { appId, baseURL } = this.context;
        const url = `/api/v1/${appId}/_eval/expression`;
        const headers = this.entity.buildHeaders();
        const { data: responseData } = await axios_1.default.post(url, { expression }, { baseURL, headers });
        return responseData.data;
    }
}
exports.DevbaseClient = DevbaseClient;
